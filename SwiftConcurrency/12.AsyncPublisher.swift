//
//  12.AsyncPublisher.swift
//  SwiftConcurrency
//
//  Created by –ê–ª–∞–Ω –ü–∞—Ä–∞—Å—Ç–∞–µ–≤ on 28.10.2025.
//
/*
  üü° AsyncSequence - —Å–º–æ—Ç—Ä–∏ 18 —É—Ä–æ–∫! –í–∫—Ä–∞—Ç—Ü–µ –ø—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã(–¥–∞–Ω–Ω—ã–µ) –ø–æ—è–≤–ª—è—é—Ç—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É.–ü—Ä–æ—â–µ –≥–æ–≤–æ—Ä—è, —ç—Ç–æ —Ç–∞–∫–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –≤—ã–¥–∞—ë—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –≤–æ –≤—Ä–µ–º–µ–Ω–∏, –∏ —Ç—ã –º–æ–∂–µ—à—å –∏—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Å –ø–æ–º–æ—â—å—é for await.
 
 ‚û°Ô∏è –ó–¥–µ—Å—å —Ü–∏–∫–ª –∂–¥—ë—Ç, –ø–æ–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
 –ö–æ–≥–¥–∞ –æ–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç ‚Äî —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∏—Ç–µ—Ä–∞—Ü–∏—é, –ø–æ—Ç–æ–º —Å–Ω–æ–≤–∞ –∂–¥—ë—Ç.
 
 @Published - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë—Ç Publisher –¥–ª—è —Å–≤–æ–π—Å—Ç–≤–∞
 .values - –ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç Combine Publisher –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
 for await in - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–ª—É—à–∞–µ—Ç –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö
 @MainActor.run - –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
 Task - –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–¥ –≤–Ω—É—Ç—Ä–∏ –æ–±—ã—á–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
 ObservableObject - –°–æ–æ–±—â–∞–µ—Ç SwiftUI, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å View
 */
import SwiftUI
import Combine

/*
 ‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è func addData() async –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –ø—É–±–ª–∏—á–Ω—ã–π —Å—Ç—Ä–∏–Ω–≥–æ–≤—ã–π –º–∞—Å—Å–∏–≤ -> @Published var myData: [String] = [] , –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –≤ 2 —Å–µ–∫—É–Ω–¥—ã
 */
class AsyncPublisherBootcampDataManager {
    
    @Published var myData: [String] = []
    
    func addData() async {
        myData.append("Apple")
        try? await Task.sleep(nanoseconds: 2_000_000_000)
        myData.append("Banana")
        try? await Task.sleep(nanoseconds: 2_000_000_000)
        myData.append("Orange")
        try? await Task.sleep(nanoseconds: 2_000_000_000)
        myData.append("Watermelon")
        try? await Task.sleep(nanoseconds: 2_000_000_000)
    }
    
}


/*
 ‚úÖ @MainActor @Published var dataArrey: [String] = []
    ‚û°Ô∏è @Published –¥–µ–ª–∞–µ—Ç dataArrey –∏–∑–¥–∞—Ç–µ–ª–µ–º (Publisher) ‚Äî SwiftUI –±—É–¥–µ—Ç —Å–ª—É—à–∞—Ç—å –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è. @MainActor –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ (UI-–ø–æ—Ç–æ–∫–µ).
 
 ‚úÖ let manager = AsyncPublisherBootcampDataManager()
    ‚û°Ô∏è manager —ç—Ç–æ –ø—Ä–µ–º–µ–Ω–Ω–∞—è(–æ–±—ä–µ–∫—Ç) —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—É—ã–π –º—ã –ø–æ–ª—É—á–∞–µ–º –∏ —É–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∫–ª–∞—Å—Å–∞ AsyncPublisherBootcampDataManager()
 
 ‚ùïcancellables –Ω—É–∂–µ–Ω –Ω—É–∂–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å—Ç–∞—Ä–æ–≥–æ Combine-–ø–æ–¥—Ö–æ–¥–∞
 
 ‚úÖ init() {
        addSubscribers()
    }
    ‚û°Ô∏è –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ ViewModel —Å—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è addSubscribers() ‚Äî —Ç–æ –µ—Å—Ç—å —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ manager.
 
   ‚ú¥Ô∏è private func addSubscribers() {
 
      ‚úÖ Task { - –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É. –í–Ω—É—Ç—Ä–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å await, –∞ –∫–æ–¥ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫.
 
      ‚úÖ for await value in
         ‚û°Ô∏è –≠—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π: –∂–¥—ë—Ç –ø–æ–∫–∞ manager.myData –∏–∑–º–µ–Ω–∏—Ç—Å—è, –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ value –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ Publisher –ø—É–±–ª–∏–∫—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.–¶–∏–∫–ª –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫, –æ–Ω –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.(‚ùå –ï—Å–ª–∏ –≤ Task –ø–æ—Å–ª–µ —Ü—ã–∫–ª–∞ for in –µ—Å—Ç—å –µ—â–µ –∫–∞–∫–∞—è-—Ç–æ –ª–æ–≥–∏–∫–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä break –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –∫–æ–¥ –ø–æ—Å–ª–µ —Ü—ã–∫–ª–∞ –Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–µ—Ç. –ò–ª–∏ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –¥–≤–∞ Task –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)
      
      ‚úÖ manager.$myData.values
         ‚û°Ô∏è manager.$myData ‚Äî —ç—Ç–æ Publisher, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è @Published —Å–≤–æ–π—Å—Ç–≤—É myData –≤ manager.
         ‚ö†Ô∏è .values ‚Äî –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç Publisher –∏–∑ Combine –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å (AsyncSequence).‚ö†Ô∏è
         ‚û°Ô∏è –≠—Ç–æ –∏ –µ—Å—Ç—å AsyncPublisher ‚Äî –º–æ—Å—Ç –º–µ–∂–¥—É Combine –∏ Swift Concurrency.
 
      ‚úÖ await MainActor.run { ... }
         ‚û°Ô∏è –ü–æ—Å–∫–æ–ª—å–∫—É dataArrey ‚Äî —Å–≤–æ–π—Å—Ç–≤–æ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –≥–ª–∞–≤–Ω—ã–º –ø–æ—Ç–æ–∫–æ–º (@MainActor),–º—ã –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ MainActor, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∏—Ç—å –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å.
 
      ‚úÖ self.dataArrey = value
         ‚û°Ô∏è —Ç–æ –µ—Å—Ç—å –∫–∞–∂–¥–æ–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ dataArrey, —á—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ SwiftUI.
 */
class AsyncPublisherBootcampViewModel: ObservableObject {
    
    @MainActor @Published var dataArrey: [String] = []
    let manager = AsyncPublisherBootcampDataManager()
    var cancellables = Set<AnyCancellable>()
    
    init() {
        addSubscribers()
    }
    
    private func addSubscribers() {
        Task {
            for await value in manager.$myData.values {
                await MainActor.run {
                    self.dataArrey = value
                }
            }
        }
        
    // ‚ùå —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ Combine-–ø–æ–¥—Ö–æ–¥–∞ –û–Ω –¥–µ–ª–∞–µ—Ç —Ç–æ –∂–µ —Å–∞–º–æ–µ, —Ç–æ–ª—å–∫–æ —Å –ø–æ–º–æ—â—å—é —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤. üîÑ –ù–æ–≤—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å for await –¥–µ–ª–∞–µ—Ç —Ç–æ –∂–µ —Å–∞–º–æ–µ, –Ω–æ –≤ –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–π —Ñ–æ—Ä–º–µ.
//        manager.$myData
//            .receive(on: DispatchQueue.main, options: nil)
//            .sink { dataArrey in
//                self.dataArrey = dataArrey
//            }
//            .store(in: &cancellables)
    }
    
    /*
    ‚úÖ –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –∏–∑–º–µ–Ω—è–µ—Ç myData (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –º–∞—Å—Å–∏–≤).–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è myData, —Ü–∏–∫–ª for await –≤ addSubscribers() –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
     */
    func start() async {
       await manager.addData()
    }
    
}

struct AsyncPublisherBootcamp: View {
    
    @StateObject var vm = AsyncPublisherBootcampViewModel()
    
    var body: some View {
        ScrollView {
            VStack {
                ForEach(vm.dataArrey, id: \.self) {
                    Text($0)
                        .font(.headline)
                }
            }
        }
        .task {
            await vm.start()
        }
    }
}

#Preview {
    AsyncPublisherBootcamp()
}
