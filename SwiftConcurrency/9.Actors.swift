//
//  9.Actors.swift
//  SwiftConcurrency
//
//  Created by –ê–ª–∞–Ω –ü–∞—Ä–∞—Å—Ç–∞–µ–≤ on 24.10.2025.
//

import SwiftUI
import Combine

/*
‚úÖ actor ‚Äî —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∏–ø (–∫–∞–∫ class), –∫–æ—Ç–æ—Ä—ã–π –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ.
 Swift –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ª–µ–¥–∏—Ç –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Å–≤–æ–π—Å—Ç–≤–∞–º –∏ –º–µ—Ç–æ–¥–∞–º —ç—Ç–æ–≥–æ actor –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ —Ç–æ–ª—å–∫–æ –∏–∑ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ (task) –∑–∞ —Ä–∞–∑.üëâ –¢–æ –µ—Å—Ç—å: –ï—Å–ª–∏ –¥–≤–∞ –ø–æ—Ç–æ–∫–∞ –ø–æ–ø—ã—Ç–∞—é—Ç—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å data, Swift –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –æ–Ω–∏ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–æ –æ—á–µ—Ä–µ–¥–∏, –∞ –Ω–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
 
 ‚úÖ private init(){ }
    ‚û°Ô∏è –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–∞–∫—Ä—ã—Ç (private), —á—Ç–æ–±—ã –Ω–∏–∫—Ç–æ –Ω–µ –º–æ–≥ —Å–æ–∑–¥–∞—Ç—å –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    ‚û°Ô∏è –¢–æ–ª—å–∫–æ MyActorDataManager.instance –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑–≤–Ω–µ.
 
 ‚úÖ var data: [String] = []
    ‚û°Ô∏è –≠—Ç–æ –æ–±—ã—á–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫, —Ö—Ä–∞–Ω—è—â–∏–π –¥–∞–Ω–Ω—ã–µ.–¢–∞–∫ –∫–∞–∫ –æ–Ω –æ–±—ä—è–≤–ª–µ–Ω –≤–Ω—É—Ç—Ä–∏ actor, –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–º—É –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–µ–Ω ‚Äî –Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å –µ–≥–æ —Å —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –±–µ–∑ await.
 
 ‚úÖ nonisolated let myRandomText = "ggggggggg"
    ‚û°Ô∏è –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ nonisolated –≥–æ–≤–æ—Ä–∏—Ç —ç—Ç–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞, –¥–æ—Å—Ç—É–ø–Ω–∞—è –±–µ–∑ await
    ‚ö†Ô∏è –û–±—ã—á–Ω–æ nonisolated –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥–ª—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∏–ª–∏ —á–∏—Å—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π,–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏
 
 ‚úÖ func getRandomData() -> String?
    ‚û°Ô∏è –≠—Ç–æ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∞–∫—Ç—ë—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ –º–µ—Ç–æ–¥—ã –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã).–ö–∞–∂–¥—ã–π –≤—ã–∑–æ–≤ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ –∞–∫—Ç–æ—Ä–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –≥–æ–Ω–æ–∫ –¥–∞–Ω–Ω—ã—Ö.
 
 ‚úÖ nonisolated func getSaveData() -> String
    ‚ö†Ô∏è –≠—Ç–æ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω –∞–∫—Ç–æ—Ä–æ–º –ø–æ—ç—Ç–æ–º—É –µ–≥–æ –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –±–µ–∑ await –∏ –∏–∑ –ª—é–±–æ–≥–æ –ø–æ—Ç–æ–∫–∞
 */
actor MyActorDataManager {
    
    static let instance = MyActorDataManager()
    private init(){ }
    
    var data: [String] = []
    nonisolated let myRandomText = "ggggggggg"
    
    func getRandomData() -> String? {
        self.data.append(UUID().uuidString)
        print(Thread.current)
        return self.data.randomElement()
    }
    
   nonisolated func getSaveData() -> String {
        return "New Data"
    }

}

// ‚ùå –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –º–µ–Ω–µ–µ —É–¥–æ–±–Ω—ã–π, –¥–µ–ª–∞–µ—Ç –∫–æ–¥ –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–º(–¥–æ –ø—è–≤–ª–µ–Ω–∏—è actor)
class MyDataManager {
    
    static let instance = MyDataManager()
    private init(){ }
    
    var data: [String] = []
    private let lock = DispatchQueue(label: "com.MyApp.MyDataManager")
    
    func getRandomData(completionHandler: @escaping (_ title: String?) -> ()) {
        lock.async {
            self.data.append(UUID().uuidString)
            print(Thread.current)
            completionHandler(self.data.randomElement())
        }
    }
}
    


// ‚úÖ –ú–µ—Ç–æ–¥ –¥–ª—è –∞–∫—Ç–æ—Ä–∞
struct HomeView: View {
    
    let manager = MyActorDataManager.instance
    @State private var text: String = ""
    let timer = Timer.publish(every: 0.3, tolerance: nil, on: .main, in: .common, options: nil).autoconnect()
    
    var body: some View {
        ZStack {
            Color.gray.opacity(0.8).ignoresSafeArea()
            
            Text(text)
                .font(.headline)
        }
        .onAppear(perform: {
            let newString = manager.getSaveData()
        })
        
        .onReceive(timer) { _ in
            Task {
                if let data = await manager.getRandomData() {
                    await MainActor.run(body: {
                        self.text = data })
                }
            }
        }
        
    }
}

// ‚úÖ –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è –ø–æ—Ç–æ–∫–∞–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
struct BrowseView: View {
    
    let manager = MyDataManager.instance
    @State private var text: String = ""
    let timer = Timer.publish(every: 0.3, tolerance: nil, on: .main, in: .common, options: nil).autoconnect()
    
    var body: some View {
        ZStack {
            Color.yellow.opacity(0.8).ignoresSafeArea()
            
            Text(text)
                .font(.headline)
        }
        .onReceive(timer) { _ in
            DispatchQueue.global(qos: .background).async {
                manager.getRandomData { title in
                    if let data = title {
                        DispatchQueue.main.async {
                            self.text = data
                       }
                    }
                }
            }
        }
    }
}

struct ActorsBootcamp: View {
    var body: some View {
        TabView {
            HomeView()
                .tabItem {
                    Label("Home", systemImage: "house.fill")
                }
            
            BrowseView()
                .tabItem {
                    Label("Browse", systemImage: "magnifyingglass")
                }
            
        }
        
    }
}

#Preview {
    ActorsBootcamp()
}
