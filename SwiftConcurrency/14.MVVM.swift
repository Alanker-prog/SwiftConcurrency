//
//  14.MVVM.swift
//  SwiftConcurrency
//
//  Created by –ê–ª–∞–Ω –ü–∞—Ä–∞—Å—Ç–∞–µ–≤ on 29.10.2025.
//

/*
 üß© –û–±—â–∞—è –∏–¥–µ—è –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –æ–±—ã—á–Ω—ã–º –∫–ª–∞—Å—Å–æ–º –∏ –∞–∫—Ç–æ—Ä–æ–º
    ‚û°Ô∏è View ‚Äî MVVMBootcamp (SwiftUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å);
    ‚û°Ô∏è ViewModel ‚Äî MVVMBootcampViewModel;
    ‚û°Ô∏è Model / Manager ‚Äî MyManagerClass –∏ MyManagerActor, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–∏—Ç–∏—Ä—É—é—Ç –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö.
    üü¢ –ó–∞–¥–∞—á–∞: –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–∑–≤–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥, –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É "Some Data!" –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ.
 */
import SwiftUI
import Combine

/*
 ‚úÖ –≠—Ç–æ –∫–ª–∞—Å—Å (reference type), –Ω–µ –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–µ–Ω —Å–∞–º –ø–æ —Å–µ–±–µ.
    ‚û°Ô∏è –û—Ç final class –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ –∑–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º –∫–ª–∞—Å—Å–∞–º
    ‚û°Ô∏è –ú–µ—Ç–æ–¥ getData() ‚Äî –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π (async) –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É (throws),–Ω–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É "Some Data!".
    ‚ö†Ô∏è –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –º–æ–≥ –±—ã –±—ã—Ç—å —Å–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: try await URLSession.shared.data(from: url)
 */
final class MyManagerClass {
    func getData() async throws -> String {
        "Some Data!"
    }
}

/*
 ‚úÖ actor ‚Äî —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∏–ø, –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    ‚û°Ô∏è –õ—é–±–æ–π –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –≤–Ω—É—Ç—Ä–∏ actor —Ç—Ä–µ–±—É–µ—Ç await, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∑–∞–¥–∞—á–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –∞–∫—Ç–æ—Ä–æ–º –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.
    ‚û°Ô∏è –í –æ—Å—Ç–∞–ª—å–Ω–æ–º ‚Äî —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π "Some Data!".
 */
actor MyManagerActor {
    func getData() async throws -> String {
        "Some Data!"
    }
}

/*
 üî∏ @MainActor –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –º–µ—Ç–æ–¥—ã ViewModel –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ (UI-–ø–æ—Ç–æ–∫–µ).–≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –∫–æ–≥–¥–∞ View –æ–±–Ω–æ–≤–ª—è–µ—Ç @Published —Å–≤–æ–π—Å—Ç–≤–æ ‚Äî —ç—Ç–æ –≤—Å–µ–≥–¥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è SwiftUI.(–≤—Å–µ –º–µ—Ç–æ–¥—ã –∏ –ø—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
 
 üî∏ @Published private(set) var myData
    @Published –¥–µ–ª–∞–µ—Ç —ç—Ç–æ —Å–≤–æ–π—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–∞–µ–º—ã–º ‚Äî SwiftUI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è.
    private(set) ‚Äî (–∑–∞–∫—Ä—ã—Ç—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö), —ç—Ç–æ —Å–≤–æ–π—Å—Ç–≤–æ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ ViewModel, –Ω–æ –Ω–µ –∏–∑–≤–Ω–µ.

 ‚úÖ private var tasks: [Task<Void, Never>]
    ‚û°Ô∏è private var: –≠—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å –¥–≤—É–º—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –ó–ê–î–ê–ß–ê–ú–ò, –µ–≥–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞
    ‚û°Ô∏è var tasks: –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ (–ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π), –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å.–í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —ç—Ç–æ –º–∞—Å—Å–∏–≤, –≤ –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∏–ª–∏ —É–¥–∞–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã (—Ç–∞—Å–∫–∏).
    ‚ùïTask ‚Äî —ç—Ç–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ç–∏–ø –≤ Swift Concurrency, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É, –≤—ã–ø–æ–ª–Ω—è–µ–º—É—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ.–¢–∏–ø –∑–∞–¥–∞—á–∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–≤—É–º—è generic-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:Task<Success, Failure>
    ‚û°Ô∏è [Task<Void, Never>] - Task —ç—Ç–æ –º–∞—Å—Å–∏–≤ –° –î–í–£–ú–Ø –ó–ê–î–ê–ß–ê–ú–ò <Void, Never>.
    ‚ö†Ô∏è Success = –¢–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    ‚ö†Ô∏è Failure = –¢–∏–ø –æ—à–∏–±–∫–∏ (–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å Error), –ª–∏–±–æ Never, –µ—Å–ª–∏ –æ—à–∏–±–æ–∫ –±—ã—Ç—å –Ω–µ –º–æ–∂–µ—Ç,–≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ —ç—Ç–æ Never!
    ‚û°Ô∏è –ó–∞–¥–∞—á–∞ <Void = —É—Å–ø–µ—Ö—É(Success)
    ‚û°Ô∏è –ó–∞–¥–∞—á–∞ Never> = –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º —á—Ç–æ –∑–∞–¥–∞—á–∞ –Ω–µ –±—É–¥–µ—Ç –≤—ã–¥–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏
 
 üîª‚öôÔ∏è func cancelTasks() {
       ‚û°Ô∏è tasks.forEach({ $0.cancel() }) - –ü–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ —Ü—ã–∫–ª forEach –≤ tasks –∏ –≤—ã–∑—ã–≤–∞–µ—Ç cancel() ‚Äî —ç—Ç–æ –æ—Ç–º–µ–Ω—è–µ—Ç –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ. –ü–æ—Ç–æ–º –æ—á–∏—â–∞–µ—Ç –º–∞—Å—Å–∏–≤, –ø—Ä–∏—Ä–∞–≤–Ω–∏–º–∞—è –∫ –ø—É—Å—Ç–æ–º—É –º–∞—Å—Å–∏–≤—É tasks = []
       ‚û°Ô∏è –û–±—ã—á–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ onDisappear, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —É—Ç–µ—á–µ–∫.
 
 üîª‚öôÔ∏è func onCallActionButtonPressed() {
      ‚û°Ô∏è let task = Task { - –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É(Task) –∏ –µ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–º –≤ let task
      ‚ö†Ô∏è –ú—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º Task(–∑–∞–¥–∞—á—É) –≤ ViewModel —á—Ç–æ –±—ã –∫–æ–¥ –±—ã–ª —á–∏—â–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ struct MVVMBootcamp
      ‚û°Ô∏è myData = try await managerActor.getData() - –†–µ–∑—É–ª—å—Ç–∞—Ç ("Some Data!") –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è –≤ myData.
      ‚û°Ô∏è } catch { - –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ‚Äî –æ–Ω–∞ –ª–æ–≤–∏—Ç—Å—è –≤ –±–ª–æ–∫–µ catch.
      ‚û°Ô∏è tasks.append(task) - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –º–∞—Å—Å–∏–≤ tasks, —á—Ç–æ–±—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Ç–º–µ–Ω–∏—Ç—å
 */

@MainActor
final class MVVMBootcampViewModel: ObservableObject {
    
    var managerClass = MyManagerClass()
    var managerActor = MyManagerActor()
    
    @Published private(set) var myData: String = "Starting text"
    private var tasks: [Task<Void, Never>] = []
    
    func cancelTasks() {
        tasks.forEach({ $0.cancel() })
        tasks = []
    }
    
    func onCallActionButtonPressed() {
       let task = Task {
           do {
              // myData = try await managerClass.getData()
               myData = try await managerActor.getData()
           } catch {
               print(error)
           }
        }
        tasks.append(task)
    }
    
}

struct MVVMBootcamp: View {
    
   @StateObject private var vm = MVVMBootcampViewModel()
    
    var body: some View {
        VStack{
            Button(vm.myData) {
                vm.onCallActionButtonPressed()
            }
        }
    }
}

#Preview {
    MVVMBootcamp()
}
