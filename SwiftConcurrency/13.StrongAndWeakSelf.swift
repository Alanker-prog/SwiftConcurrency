//
//  13.StrongAndWeakSelf.swift
//  SwiftConcurrency
//
//  Created by –ê–ª–∞–Ω –ü–∞—Ä–∞—Å—Ç–∞–µ–≤ on 29.10.2025.
//

import SwiftUI

struct StrongAndWeakSelfBootcamp: View {
    var body: some View {
        Text(/*@START_MENU_TOKEN@*/"Hello, World!"/*@END_MENU_TOKEN@*/)
    }
}

#Preview {
    StrongAndWeakSelfBootcamp()
}
/*
 üß© 1. –ß—Ç–æ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ (–¥–æ Swift Concurrency)

 –†–∞–Ω—å—à–µ, –∫–æ–≥–¥–∞ –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏:
 –∑–∞–º—ã–∫–∞–Ω–∏—è (completion handlers),
 Combine (sink),
 GCD (DispatchQueue.async),–º—ã —á–∞—Å—Ç–æ —Å–æ–∑–¥–∞–≤–∞–ª–∏ —Ü–∏–∫–ª—ã —Å–∏–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:

 networkManager.loadData { data in
     self.handleData(data) // <-- self —Å–∏–ª—å–Ω–æ –∑–∞—Ö–≤–∞—á–µ–Ω–æ
 }

 ‚û°Ô∏è –ó–∞–º—ã–∫–∞–Ω–∏–µ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–ª–æ self —Å–∏–ª—å–Ω–æ,
 –∏ –µ—Å–ª–∏ self —Ö—Ä–∞–Ω–∏–ª–æ —Å—Å—ã–ª–∫—É –Ω–∞ networkManager, —Ç–æ –æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–ª—Å—è retain cycle ‚Äî
 –æ–±—ä–µ–∫—Ç—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Å–≤–æ–±–æ–∂–¥–∞–ª–∏—Å—å –∏–∑ –ø–∞–º—è—Ç–∏.

 üîß –ü–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–ª–∞–±—ã–µ —Å—Å—ã–ª–∫–∏:

 networkManager.loadData { [weak self] data in
     self?.handleData(data)
 }

 ‚öôÔ∏è 2. –ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –≤ Swift Concurrency

 –¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –µ—Å—Ç—å:

 Task {
     await viewModel.loadData()
 }


 –∏–ª–∏

 for await message in chat.messagesStream {
     await handle(message)
 }


 ‚ùóÔ∏è–ó–¥–µ—Å—å –Ω–µ—Ç —Ü–∏–∫–ª–∞ —Å–∏–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫, –¥–∞–∂–µ –µ—Å–ª–∏ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å self –Ω–∞–ø—Ä—è–º—É—é.

 –ü–æ—á–µ–º—É? –ü–æ—Ç–æ–º—É —á—Ç–æ Swift Concurrency —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏ –∑–∞–¥–∞—á –ø–æ-–¥—Ä—É–≥–æ–º—É, –∏ Task –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ self —Ç–∞–∫, –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –∑–∞–º—ã–∫–∞–Ω–∏–µ.

 üß† 3. –ö–∞–∫ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç

 –ö–æ–≥–¥–∞ —Ç—ã —Å–æ–∑–¥–∞—ë—à—å –∑–∞–¥–∞—á—É (Task { ... }), –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–µ–µ:

 –ó–∞–¥–∞—á–∞ ‚Äî —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –∂–∏–≤—É—â–∏–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç self;

 –ö–æ–¥ –≤–Ω—É—Ç—Ä–∏ Task –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç self, –Ω–æ:

 –µ—Å–ª–∏ Task –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ @MainActor, —Ç–æ Swift –Ω–µ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –∂–∏–∑–Ω—å self –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ;

 –µ—Å–ª–∏ self —É–Ω–∏—á—Ç–æ–∂–µ–Ω, —Ç–æ –∑–∞–¥–∞—á–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.

 –ü—Ä–∏–º–µ—Ä:
 class MyViewModel {
     func start() {
         Task {
             await loadData()
         }
     }
     
     func loadData() async {
         print("–ó–∞–≥—Ä—É–∂–∞–µ–º...")
     }
 }


 –ï—Å–ª–∏ ViewModel –±—É–¥–µ—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç–∫—Ä–∞–Ω –∑–∞–∫—Ä—ã–ª—Å—è),
 –∑–∞–¥–∞—á–∞ –≤–Ω—É—Ç—Ä–∏ Task –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, –ø–æ—Ç–æ–º—É —á—Ç–æ Swift Concurrency –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–∫—Ç–æ—Ä–æ–≤ –∏ –∑–∞–¥–∞—á.

 üëâ –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é –ø–∏—Å–∞—Ç—å [weak self].

 üîí 4. @MainActor –∏ –∑–∞—â–∏—Ç–∞ –æ—Ç —É—Ç–µ—á–µ–∫

 –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –ø–æ–º–µ—á–µ–Ω @MainActor, —Ç–æ:

 –æ–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å—Ç—Ä–æ–≥–æ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏;

 self —Ç–æ–∂–µ –∂–∏–≤—ë—Ç –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –∞–∫—Ç–æ—Ä–µ;

 Swift –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –Ω–µ –±—É–¥–µ—Ç —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –∑–∞—Ö–≤–∞—Ç–µ self.

 –ü—Ä–∏–º–µ—Ä:

 @MainActor
 class ViewModel {
     func fetch() async {
         print("fetch")
     }

     func start() {
         Task {
             await fetch() // –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º self –±–µ–∑–æ–ø–∞—Å–Ω–æ
         }
     }
 }


 –ó–¥–µ—Å—å Task –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ MainActor ‚Üí
 –Ω–∏–∫–∞–∫–æ–π retain cycle –Ω–µ –º–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å, –ø–æ—Ç–æ–º—É —á—Ç–æ –∑–∞–¥–∞—á–∞ –∂–∏–∑–Ω–µ–Ω–Ω–æ —Å–≤—è–∑–∞–Ω–∞ —Å –∞–∫—Ç–æ—Ä–æ–º, –∞ –Ω–µ —Å –æ–±—ä–µ–∫—Ç–æ–º self.

 üß© 5. –ö–æ–≥–¥–∞ —Å–ª–∞–±—ã–µ —Å—Å—ã–ª–∫–∏ –≤—Å—ë –∂–µ –Ω—É–∂–Ω—ã

 –•–æ—Ç—è –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤ Swift Concurrency —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –≤–ª–∞–¥–µ–Ω–∏—è,
 –∏–Ω–æ–≥–¥–∞ weak self –≤—Å—ë –µ—â—ë –ø–æ–ª–µ–∑–Ω–æ:

 üß∑ –°–ª—É—á–∞–π 1: –∫–æ–≥–¥–∞ Task –∂–∏–≤—ë—Ç –¥–æ–ª—å—à–µ, —á–µ–º –æ–±—ä–µ–∫—Ç

 –ï—Å–ª–∏ —Ç—ã —Å–æ–∑–¥–∞—ë—à—å –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –∂–∏—Ç—å –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ–±—ä–µ–∫—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:

 class Downloader {
     func startDownload() {
         Task.detached {
             await self.downloadFile()
         }
     }
 }


 –ó–¥–µ—Å—å Task.detached –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –∞–∫—Ç–æ—Ä—É –∏ –Ω–µ –∑–Ω–∞–µ—Ç –ø—Ä–æ self.
 –ï—Å–ª–∏ Downloader —É–Ω–∏—á—Ç–æ–∂–∏—Ç—Å—è, –∞ –∑–∞–¥–∞—á–∞ –≤—Å—ë –µ—â—ë –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è,
 —Ç–æ –æ–Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É –∏ –±—É–¥–µ—Ç —É–¥–µ—Ä–∂–∏–≤–∞—Ç—å self –≤ –ø–∞–º—è—Ç–∏.

 ‚û°Ô∏è –í —Ç–∞–∫–∏—Ö —Å–ª—É—á–∞—è—Ö –Ω—É–∂–Ω–æ —è–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å weak:

 Task.detached { [weak self] in
     await self?.downloadFile()
 }

 üß∑ –°–ª—É—á–∞–π 2: –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Combine, closures –∏ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º

 –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Å—Ç–∞—Ä—ã–π API —Å completion handlers,
 —Ç–∞–º –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –º–æ–≥—É—Ç –±—ã—Ç—å retain cycle ‚Äî Swift Concurrency –Ω–µ —Å–ø–∞—Å—ë—Ç.
 –¢–æ–≥–¥–∞ weak self –≤—Å—ë –µ—â—ë –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.

 üßÆ 6. –ü–æ—á–µ–º—É —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ ‚Äî —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏

 Swift Concurrency –ø–æ—Å—Ç—Ä–æ–µ–Ω –≤–æ–∫—Ä—É–≥ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–ª–∞–¥–µ–Ω–∏—è (ownership model) –∏ –ø–æ—Ç–æ–∫–æ–≤ –∞–∫—Ç–æ—Ä–æ–≤ (actors).
 –ì–ª–∞–≤–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã:

 Structured Concurrency ‚Äî –∑–∞–¥–∞—á–∏ –∂–∏–≤—É—Ç –≤–Ω—É—Ç—Ä–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–¥–∞—á –∏ –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å –Ω–∏–º–∏.

 Task Tree ‚Äî –µ—Å–ª–∏ self —É–Ω–∏—á—Ç–æ–∂–µ–Ω, —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è.

 Actors ‚Äî –∫–∞–∂–¥–∞—è —Å—É—â–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–≤–æ–π –∫–æ–¥ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ.

 üìò –ü–æ—ç—Ç–æ–º—É Task –Ω–µ —É–¥–µ—Ä–∂–∏–≤–∞–µ—Ç self "–Ω–∞–≤–µ—á–Ω–æ" ‚Äî –æ–Ω–∞ –ª–∏—à—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–≥–æ, –ø–æ–∫–∞ –æ–Ω –∂–∏–≤.

 üß† –ò—Ç–æ–≥–æ: –ø–æ—á–µ–º—É weak self –±–æ–ª—å—à–µ –ø–æ—á—Ç–∏ –Ω–µ –Ω—É–∂–µ–Ω
 –ü—Ä–∏—á–∏–Ω–∞    –û–±—ä—è—Å–Ω–µ–Ω–∏–µ
 ‚úÖ Task –Ω–µ —Å–æ–∑–¥–∞—ë—Ç —Ü–∏–∫–ª–æ–≤    –ó–∞–¥–∞—á–∏ –Ω–µ —É–¥–µ—Ä–∂–∏–≤–∞—é—Ç self –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
 ‚úÖ Structured Concurrency    –†–æ–¥–∏—Ç–µ–ª—å —É–Ω–∏—á—Ç–æ–∂–µ–Ω ‚Üí –¥–æ—á–µ—Ä–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è
 ‚úÖ @MainActor –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å    self –∂–∏–≤—ë—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –∞–∫—Ç–æ—Ä–µ, —É—Ç–µ—á–µ–∫ –Ω–µ—Ç
 ‚ö†Ô∏è weak self –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ Task.detached    –¢–∞–º –Ω–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞–∫—Ç–æ—Ä–∞, –º–æ–∂–Ω–æ —É–¥–µ—Ä–∂–∞—Ç—å self
 üí¨ –ü—Ä–∏–º–µ—Ä —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
 
 üëé –°—Ç–∞—Ä—ã–π Combine-–ø–æ–¥—Ö–æ–¥:
 publisher
     .sink { [weak self] value in
         self?.updateUI(value)
     }


 –Ω—É–∂–Ω–æ weak self, –∏–Ω–∞—á–µ —É—Ç–µ—á–∫–∞.

 üëç –ù–æ–≤—ã–π Concurrency-–ø–æ–¥—Ö–æ–¥:
 Task {
     for await value in publisher.values {
         await self.updateUI(value)
     }
 }


 weak self –Ω–µ –Ω—É–∂–Ω–æ ‚Äî Task –±–µ–∑–æ–ø–∞—Å–Ω–∞ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å –æ–±—ä–µ–∫—Ç–æ–º.
 */
